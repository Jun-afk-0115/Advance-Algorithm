class DirectedGraph:
    def __init__(self):
        # Dictionary to store adjacency list
        self.adjacency_list = {}

    def addVertex(self, vertex):
        """Adds a new vertex to the graph if it doesn't already exist."""
        if vertex not in self.adjacency_list:
            self.adjacency_list[vertex] = []

    def addEdge(self, from_vertex, to_vertex):
        """
        Adds a directed edge from 'from_vertex' to 'to_vertex'.
        Automatically adds the vertices if they do not exist.
        """
        self.addVertex(from_vertex)
        self.addVertex(to_vertex)
        self.adjacency_list[from_vertex].append(to_vertex)

    def listOutgoingAdjacentVertex(self, vertex):
        """
        Returns a list of vertices that are directly reachable (outgoing edges)
        from the given vertex.
        """
        return self.adjacency_list.get(vertex, [])

    def __str__(self):
        """Nicely prints the adjacency list of the graph."""
        return '\n'.join(f'{v} -> {neigh}' for v, neigh in self.adjacency_list.items())

//this code file must be saved as Question2_V1//
